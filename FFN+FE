{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport riiideducation\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\nimport gc\nfrom matplotlib.ticker import FuncFormatter\nimport dask.dataframe as dd\nimport time\n\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input/riiid-test-answer-prediction'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","execution_count":1,"outputs":[{"output_type":"stream","text":"/kaggle/input/riiid-test-answer-prediction/example_sample_submission.csv\n/kaggle/input/riiid-test-answer-prediction/example_test.csv\n/kaggle/input/riiid-test-answer-prediction/questions.csv\n/kaggle/input/riiid-test-answer-prediction/train.csv\n/kaggle/input/riiid-test-answer-prediction/lectures.csv\n/kaggle/input/riiid-test-answer-prediction/riiideducation/competition.cpython-37m-x86_64-linux-gnu.so\n/kaggle/input/riiid-test-answer-prediction/riiideducation/__init__.py\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"#a traditional wa to read the dataset, ~5min\n# %%time\n\n# dtypes = {\n#     \"row_id\": \"int64\",\n#     \"timestamp\": \"int64\",\n#     \"user_id\": \"int32\",\n#     \"content_id\": \"int16\",\n#     \"content_type_id\": \"boolean\",\n#     \"task_container_id\": \"int16\",\n#     \"user_answer\": \"int8\",\n#     \"answered_correctly\": \"int8\",\n#     \"prior_question_elapsed_time\": \"float32\", \n#     \"prior_question_had_explanation\": \"boolean\"\n# }\n\n# train = pd.read_csv(\"../input/riiid-test-answer-prediction/train.csv\", dtype=dtypes)\n\n# print(\"Train size:\", data.shape)","execution_count":2,"outputs":[]},{"metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","trusted":true},"cell_type":"code","source":"%%time\n\ntrain = pd.read_pickle(\"../input/riid-pickle-file/train.pkl\")\n\nprint(\"Train size:\", train.shape)","execution_count":2,"outputs":[{"output_type":"stream","text":"Train size: (101230332, 10)\nCPU times: user 5.41 s, sys: 6.25 s, total: 11.7 s\nWall time: 45.7 s\n","name":"stdout"}]},{"metadata":{},"cell_type":"markdown","source":"#help_usage, a new feature that measures the number of times the user asks for help (taking lectures)"},{"metadata":{"trusted":true},"cell_type":"code","source":"# help_used = train[train.answered_correctly == -1].groupby('user_id')['content_id'].count()\n# help_used = help_used.reset_index().rename(columns={'content_id': 'help_used'})\n# help_used","execution_count":3,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train","execution_count":4,"outputs":[{"output_type":"execute_result","execution_count":4,"data":{"text/plain":"              row_id  timestamp     user_id  content_id  content_type_id  \\\n0                  0          0         115        5692            False   \n1                  1      56943         115        5716            False   \n2                  2     118363         115         128            False   \n3                  3     131167         115        7860            False   \n4                  4     137965         115        7922            False   \n...              ...        ...         ...         ...              ...   \n101230327  101230327  428564420  2147482888        3586            False   \n101230328  101230328  428585000  2147482888        6341            False   \n101230329  101230329  428613475  2147482888        4212            False   \n101230330  101230330  428649406  2147482888        6343            False   \n101230331  101230331  428692118  2147482888        7995            False   \n\n           task_container_id  user_answer  answered_correctly  \\\n0                          1            3                   1   \n1                          2            2                   1   \n2                          0            0                   1   \n3                          3            0                   1   \n4                          4            1                   1   \n...                      ...          ...                 ...   \n101230327                 22            0                   1   \n101230328                 23            3                   1   \n101230329                 24            3                   1   \n101230330                 25            1                   0   \n101230331                 26            3                   1   \n\n           prior_question_elapsed_time prior_question_had_explanation  \n0                                  NaN                            NaN  \n1                              37000.0                          False  \n2                              55000.0                          False  \n3                              19000.0                          False  \n4                              11000.0                          False  \n...                                ...                            ...  \n101230327                      18000.0                           True  \n101230328                      14000.0                           True  \n101230329                      14000.0                           True  \n101230330                      22000.0                           True  \n101230331                      29000.0                           True  \n\n[101230332 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>timestamp</th>\n      <th>user_id</th>\n      <th>content_id</th>\n      <th>content_type_id</th>\n      <th>task_container_id</th>\n      <th>user_answer</th>\n      <th>answered_correctly</th>\n      <th>prior_question_elapsed_time</th>\n      <th>prior_question_had_explanation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>115</td>\n      <td>5692</td>\n      <td>False</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>56943</td>\n      <td>115</td>\n      <td>5716</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>37000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>118363</td>\n      <td>115</td>\n      <td>128</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>55000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>131167</td>\n      <td>115</td>\n      <td>7860</td>\n      <td>False</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>19000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>137965</td>\n      <td>115</td>\n      <td>7922</td>\n      <td>False</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>101230327</th>\n      <td>101230327</td>\n      <td>428564420</td>\n      <td>2147482888</td>\n      <td>3586</td>\n      <td>False</td>\n      <td>22</td>\n      <td>0</td>\n      <td>1</td>\n      <td>18000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101230328</th>\n      <td>101230328</td>\n      <td>428585000</td>\n      <td>2147482888</td>\n      <td>6341</td>\n      <td>False</td>\n      <td>23</td>\n      <td>3</td>\n      <td>1</td>\n      <td>14000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101230329</th>\n      <td>101230329</td>\n      <td>428613475</td>\n      <td>2147482888</td>\n      <td>4212</td>\n      <td>False</td>\n      <td>24</td>\n      <td>3</td>\n      <td>1</td>\n      <td>14000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101230330</th>\n      <td>101230330</td>\n      <td>428649406</td>\n      <td>2147482888</td>\n      <td>6343</td>\n      <td>False</td>\n      <td>25</td>\n      <td>1</td>\n      <td>0</td>\n      <td>22000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101230331</th>\n      <td>101230331</td>\n      <td>428692118</td>\n      <td>2147482888</td>\n      <td>7995</td>\n      <td>False</td>\n      <td>26</td>\n      <td>3</td>\n      <td>1</td>\n      <td>29000.0</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>101230332 rows Ã— 10 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"//end new"},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train = train[train['answered_correctly'] != -1]\ntrain","execution_count":3,"outputs":[{"output_type":"execute_result","execution_count":3,"data":{"text/plain":"              row_id  timestamp     user_id  content_id  content_type_id  \\\n0                  0          0         115        5692            False   \n1                  1      56943         115        5716            False   \n2                  2     118363         115         128            False   \n3                  3     131167         115        7860            False   \n4                  4     137965         115        7922            False   \n...              ...        ...         ...         ...              ...   \n101230327  101230327  428564420  2147482888        3586            False   \n101230328  101230328  428585000  2147482888        6341            False   \n101230329  101230329  428613475  2147482888        4212            False   \n101230330  101230330  428649406  2147482888        6343            False   \n101230331  101230331  428692118  2147482888        7995            False   \n\n           task_container_id  user_answer  answered_correctly  \\\n0                          1            3                   1   \n1                          2            2                   1   \n2                          0            0                   1   \n3                          3            0                   1   \n4                          4            1                   1   \n...                      ...          ...                 ...   \n101230327                 22            0                   1   \n101230328                 23            3                   1   \n101230329                 24            3                   1   \n101230330                 25            1                   0   \n101230331                 26            3                   1   \n\n           prior_question_elapsed_time prior_question_had_explanation  \n0                                  NaN                            NaN  \n1                              37000.0                          False  \n2                              55000.0                          False  \n3                              19000.0                          False  \n4                              11000.0                          False  \n...                                ...                            ...  \n101230327                      18000.0                           True  \n101230328                      14000.0                           True  \n101230329                      14000.0                           True  \n101230330                      22000.0                           True  \n101230331                      29000.0                           True  \n\n[99271300 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>timestamp</th>\n      <th>user_id</th>\n      <th>content_id</th>\n      <th>content_type_id</th>\n      <th>task_container_id</th>\n      <th>user_answer</th>\n      <th>answered_correctly</th>\n      <th>prior_question_elapsed_time</th>\n      <th>prior_question_had_explanation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>115</td>\n      <td>5692</td>\n      <td>False</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>56943</td>\n      <td>115</td>\n      <td>5716</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>37000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>118363</td>\n      <td>115</td>\n      <td>128</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>55000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>131167</td>\n      <td>115</td>\n      <td>7860</td>\n      <td>False</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>19000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>137965</td>\n      <td>115</td>\n      <td>7922</td>\n      <td>False</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>101230327</th>\n      <td>101230327</td>\n      <td>428564420</td>\n      <td>2147482888</td>\n      <td>3586</td>\n      <td>False</td>\n      <td>22</td>\n      <td>0</td>\n      <td>1</td>\n      <td>18000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101230328</th>\n      <td>101230328</td>\n      <td>428585000</td>\n      <td>2147482888</td>\n      <td>6341</td>\n      <td>False</td>\n      <td>23</td>\n      <td>3</td>\n      <td>1</td>\n      <td>14000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101230329</th>\n      <td>101230329</td>\n      <td>428613475</td>\n      <td>2147482888</td>\n      <td>4212</td>\n      <td>False</td>\n      <td>24</td>\n      <td>3</td>\n      <td>1</td>\n      <td>14000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101230330</th>\n      <td>101230330</td>\n      <td>428649406</td>\n      <td>2147482888</td>\n      <td>6343</td>\n      <td>False</td>\n      <td>25</td>\n      <td>1</td>\n      <td>0</td>\n      <td>22000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101230331</th>\n      <td>101230331</td>\n      <td>428692118</td>\n      <td>2147482888</td>\n      <td>7995</td>\n      <td>False</td>\n      <td>26</td>\n      <td>3</td>\n      <td>1</td>\n      <td>29000.0</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>99271300 rows Ã— 10 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"The training dataset has more than 100,000,000 records of interactions. For simplicity, we will subset the dataset based on user_id."},{"metadata":{"trusted":true},"cell_type":"code","source":"subset_id = train.groupby('user_id').agg({'answered_correctly':'count'}).reset_index().sample(frac=0.1, random_state=77)\nsubset_id","execution_count":4,"outputs":[{"output_type":"execute_result","execution_count":4,"data":{"text/plain":"           user_id  answered_correctly\n127021   697091063                 225\n281078  1537216785                  56\n136321   748409501                  30\n298705  1632423590                  30\n37721    207228443                  30\n...            ...                 ...\n31403    172359786                 173\n309513  1691956510                1393\n227722  1246093768                  40\n207780  1137484998                1125\n258514  1413162230                  54\n\n[39366 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>answered_correctly</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>127021</th>\n      <td>697091063</td>\n      <td>225</td>\n    </tr>\n    <tr>\n      <th>281078</th>\n      <td>1537216785</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>136321</th>\n      <td>748409501</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>298705</th>\n      <td>1632423590</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>37721</th>\n      <td>207228443</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>31403</th>\n      <td>172359786</td>\n      <td>173</td>\n    </tr>\n    <tr>\n      <th>309513</th>\n      <td>1691956510</td>\n      <td>1393</td>\n    </tr>\n    <tr>\n      <th>227722</th>\n      <td>1246093768</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>207780</th>\n      <td>1137484998</td>\n      <td>1125</td>\n    </tr>\n    <tr>\n      <th>258514</th>\n      <td>1413162230</td>\n      <td>54</td>\n    </tr>\n  </tbody>\n</table>\n<p>39366 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train = train[train['user_id'].isin(subset_id['user_id'])]","execution_count":5,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train","execution_count":7,"outputs":[{"output_type":"execute_result","execution_count":7,"data":{"text/plain":"              row_id  timestamp     user_id  content_id  content_type_id  \\\n46                46          0         124        7900            False   \n47                47      32683         124        7876            False   \n48                48      62000         124         175            False   \n49                49      83632         124        1278            False   \n50                50     189483         124        2064            False   \n...              ...        ...         ...         ...              ...   \n101228551  101228551     412816  2147451179         695            False   \n101228552  101228552     466537  2147451179         972            False   \n101228553  101228553     506735  2147451179         731            False   \n101228554  101228554     533630  2147451179       10685            False   \n101228555  101228555     557223  2147451179         582            False   \n\n           task_container_id  user_answer  answered_correctly  \\\n46                         0            0                   1   \n47                         1            0                   0   \n48                         2            2                   1   \n49                         3            1                   0   \n50                         4            2                   0   \n...                      ...          ...                 ...   \n101228551                 11            0                   0   \n101228552                 12            1                   0   \n101228553                 13            1                   0   \n101228554                 14            0                   1   \n101228555                 15            0                   0   \n\n           prior_question_elapsed_time prior_question_had_explanation  \n46                                 NaN                            NaN  \n47                             26000.0                          False  \n48                             29000.0                          False  \n49                             26000.0                          False  \n50                             18000.0                          False  \n...                                ...                            ...  \n101228551                      26000.0                          False  \n101228552                      20000.0                           True  \n101228553                      20000.0                           True  \n101228554                      20000.0                           True  \n101228555                      17000.0                           True  \n\n[9992259 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>timestamp</th>\n      <th>user_id</th>\n      <th>content_id</th>\n      <th>content_type_id</th>\n      <th>task_container_id</th>\n      <th>user_answer</th>\n      <th>answered_correctly</th>\n      <th>prior_question_elapsed_time</th>\n      <th>prior_question_had_explanation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>46</th>\n      <td>46</td>\n      <td>0</td>\n      <td>124</td>\n      <td>7900</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>47</td>\n      <td>32683</td>\n      <td>124</td>\n      <td>7876</td>\n      <td>False</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>26000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>48</td>\n      <td>62000</td>\n      <td>124</td>\n      <td>175</td>\n      <td>False</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>29000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>49</td>\n      <td>83632</td>\n      <td>124</td>\n      <td>1278</td>\n      <td>False</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>26000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>50</td>\n      <td>189483</td>\n      <td>124</td>\n      <td>2064</td>\n      <td>False</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>18000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>101228551</th>\n      <td>101228551</td>\n      <td>412816</td>\n      <td>2147451179</td>\n      <td>695</td>\n      <td>False</td>\n      <td>11</td>\n      <td>0</td>\n      <td>0</td>\n      <td>26000.0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>101228552</th>\n      <td>101228552</td>\n      <td>466537</td>\n      <td>2147451179</td>\n      <td>972</td>\n      <td>False</td>\n      <td>12</td>\n      <td>1</td>\n      <td>0</td>\n      <td>20000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101228553</th>\n      <td>101228553</td>\n      <td>506735</td>\n      <td>2147451179</td>\n      <td>731</td>\n      <td>False</td>\n      <td>13</td>\n      <td>1</td>\n      <td>0</td>\n      <td>20000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101228554</th>\n      <td>101228554</td>\n      <td>533630</td>\n      <td>2147451179</td>\n      <td>10685</td>\n      <td>False</td>\n      <td>14</td>\n      <td>0</td>\n      <td>1</td>\n      <td>20000.0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>101228555</th>\n      <td>101228555</td>\n      <td>557223</td>\n      <td>2147451179</td>\n      <td>582</td>\n      <td>False</td>\n      <td>15</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17000.0</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>9992259 rows Ã— 10 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"# Feature Engineering"},{"metadata":{},"cell_type":"markdown","source":"As the first step towards building a knowledge tracing model, we developed several features based on the results of EDA."},{"metadata":{},"cell_type":"markdown","source":"Updates above"},{"metadata":{"trusted":true},"cell_type":"code","source":" \ndel train['row_id']\ndel train['task_container_id']\ndel train['content_type_id']\ngc.collect()","execution_count":6,"outputs":[{"output_type":"execute_result","execution_count":6,"data":{"text/plain":"87"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"%%time\nquestions = pd.read_csv(\"../input/riiid-test-answer-prediction/questions.csv\")","execution_count":7,"outputs":[{"output_type":"stream","text":"CPU times: user 10 ms, sys: 2.65 ms, total: 12.7 ms\nWall time: 26.5 ms\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train_questions=train.merge(questions,left_on='content_id',right_on='question_id',how='left')\ndel questions\ntrain_questions_gp=train_questions.groupby('question_id').agg({'answered_correctly':['mean','count','std']}).reset_index()\ntrain_questions_gp.columns=['question_id','q_correct','q_count','q_std']\ntrain_questions_gp.q_std = train_questions_gp.q_std.fillna(train_questions_gp.q_std.mean())","execution_count":8,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"del train_questions\ngc.collect()","execution_count":9,"outputs":[{"output_type":"execute_result","execution_count":9,"data":{"text/plain":"20"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train=train.merge(train_questions_gp,left_on='content_id',right_on='question_id',how='left')\ndel train_questions_gp\n\ngc.collect()","execution_count":10,"outputs":[{"output_type":"execute_result","execution_count":10,"data":{"text/plain":"20"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"user_flags = train.groupby('user_id').agg({'answered_correctly':['mean','count','min','max','std']}).reset_index()\nuser_flags.columns=['user_id','user_answer_mean','user_answer_count','user_min','user_max','user_std']\nuser_flags.user_std = user_flags.user_std.fillna(user_flags.user_std.mean())\nuser_flags.isnull().sum()\ngc.collect()","execution_count":11,"outputs":[{"output_type":"execute_result","execution_count":11,"data":{"text/plain":"20"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train_df=train.merge(user_flags,on=['user_id'],how='left')\ndel user_flags\ngc.collect()","execution_count":12,"outputs":[{"output_type":"execute_result","execution_count":12,"data":{"text/plain":"20"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# train_df = train_df[train_df.content_type_id == False]\n\n# #arrange by timestamp\n# train_df = train_df.sort_values(['timestamp'], ascending=True).reset_index(drop = True)","execution_count":13,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"new"},{"metadata":{"trusted":true},"cell_type":"code","source":"# train_df['prior_question_had_explanation'].fillna(False, inplace=True)\n# train_df.prior_question_had_explanation=train_df.prior_question_had_explanation.astype('int8')\n\n# train_df['lag'] = train_df.groupby('user_id')['prior_question_had_explanation'].shift()\n# cum = train_df.groupby('user_id')['lag'].agg(['cumsum', 'cumcount'])\n# train_df['explanation_mean'] = cum['cumsum'] / cum['cumcount']\n# train_df['explanation_cumsum'] = cum['cumsum'] \n# train_df.drop(columns=['lag'], inplace=True)\n\n# train_df['explanation_mean'].fillna(0, inplace=True)\n# train_df['explanation_cumsum'].fillna(0, inplace=True)\n# train_df.explanation_mean=train_df.explanation_mean.astype('float16')\n# train_df.explanation_cumsum=train_df.explanation_cumsum.astype('int16')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# train_df['lagtime'] = train_df.groupby('user_id')['timestamp'].shift()\n\n# train_df['lagtime']=train_df['timestamp']-train_df['lagtime']\n# train_df['lagtime'].fillna(0, inplace=True)\n# train_df.lagtime=train_df.lagtime.astype('int32')\n# #train_df.drop(columns=['timestamp'], inplace=True)\n# lagtime_agg = train_df.groupby('user_id')['lagtime'].agg(['mean'])\n# train_df['lagtime_mean'] = train_df['user_id'].map(lagtime_agg['mean'])\n# train_df.lagtime_mean=train_df.lagtime_mean.astype('int32')\n\n# train_df['timestamp']=train_df['timestamp']/(1000*3600)\n# train_df.timestamp=train_df.timestamp.astype('int16')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train_df","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"#new a5a;58","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train_df.shape[1]","execution_count":21,"outputs":[{"output_type":"execute_result","execution_count":21,"data":{"text/plain":"20"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# train_df['answered_correctly'].astype(int8)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"********"},{"metadata":{},"cell_type":"markdown","source":"Model Fitting****"},{"metadata":{},"cell_type":"markdown","source":"Random Forest\n"},{"metadata":{"trusted":true},"cell_type":"code","source":"\n\nfrom sklearn.model_selection import train_test_split #Splitting data for model training\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\n#NA Values of Prior Question had Explanation with False\ntrain['prior_question_had_explanation'].fillna(False, inplace=True)\n    \n#Prior Question Elapsed Time MVT\ntrain['prior_question_elapsed_time'].fillna(25302, inplace=True)\nX=train.loc[:,[ 'prior_question_elapsed_time',\n       'prior_question_had_explanation','question_id','q_correct','q_count','q_std' ,'user_answer_mean',\n    'user_answer_count', 'user_min', 'user_max', 'user_std']]#Selecting feature variables\n\nY=train['answered_correctly'] #Selecting the output columns\nfeature_list=X.columns","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"%%time\nX_train,X_test,Y_train,Y_test=train_test_split(X, Y,test_size=0.3,random_state=1)\nrf_params = {'n_estimators': 100,          \n     'max_depth': 8,             \n     'max_features':7,\n               }  \nrf = RandomForestClassifier(**rf_params)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"%%time\nrf.fit(X_train, Y_train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"pred=rf.predict(X_test)\nY_test=np.asarray(Y_test)\npred=np.asarray(pred)\nroc=roc_auc_score(Y_test, pred)\nprint(\" - ROC: {:.5}\".format(roc))","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"XGBOOST"},{"metadata":{"trusted":true},"cell_type":"code","source":"import xgboost\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\n\n#Parameters for XGBoost \nparams1 = {\n    'max_depth' : 7,\n    'alpha':0.1, \n    'subsample':0.7,\n    'tree_method' : 'gpu_hist',\n    'learning_rate': 0.1,\n    'colsample_bytree':0.7,\n    'eval_metric':'auc', \n    'objective' : 'binary:logistic',\n    'grow_policy' : 'lossguide'\n}\n\ntrain_matrix = xgboost.DMatrix(data = X_train, label = Y_train)\ntest_matrix=xgboost.DMatrix(data = X_test)\nxgb = xgboost.train(params1, dtrain = train_matrix)\n\npredicts = xgb.predict(test_matrix)\nroc = roc_auc_score(Y_test.astype('int32'), predicts)\nprint('ROC for XGBoost model')\nprint(roc)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"##nn\n"},{"metadata":{"trusted":true},"cell_type":"code","source":"train_df.isna().sum()\n\ntrain_df['prior_question_had_explanation'].fillna(False, inplace=True)\ntrain_df['prior_question_elapsed_time'].fillna(train_df['prior_question_elapsed_time'].mean(), inplace=True)\ntrain_df.isna().sum()","execution_count":14,"outputs":[{"output_type":"execute_result","execution_count":14,"data":{"text/plain":"timestamp                         0\nuser_id                           0\ncontent_id                        0\nuser_answer                       0\nanswered_correctly                0\nprior_question_elapsed_time       0\nprior_question_had_explanation    0\nquestion_id                       0\nq_correct                         0\nq_count                           0\nq_std                             0\nuser_answer_mean                  0\nuser_answer_count                 0\nuser_min                          0\nuser_max                          0\nuser_std                          0\ndtype: int64"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train_df\nfeature_list=train_df.columns\nfeature_list","execution_count":15,"outputs":[{"output_type":"execute_result","execution_count":15,"data":{"text/plain":"Index(['timestamp', 'user_id', 'content_id', 'user_answer',\n       'answered_correctly', 'prior_question_elapsed_time',\n       'prior_question_had_explanation', 'question_id', 'q_correct', 'q_count',\n       'q_std', 'user_answer_mean', 'user_answer_count', 'user_min',\n       'user_max', 'user_std'],\n      dtype='object')"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train_df","execution_count":19,"outputs":[{"output_type":"execute_result","execution_count":19,"data":{"text/plain":"         prior_question_elapsed_time  prior_question_had_explanation  \\\n0                       25420.408321                           False   \n1                       26000.000000                           False   \n2                       29000.000000                           False   \n3                       26000.000000                           False   \n4                       18000.000000                           False   \n...                              ...                             ...   \n9992254                 26000.000000                           False   \n9992255                 20000.000000                            True   \n9992256                 20000.000000                            True   \n9992257                 20000.000000                            True   \n9992258                 17000.000000                            True   \n\n         question_id  q_correct  q_count     q_std  user_answer_mean  \\\n0               7900   0.829039    17969  0.376485          0.233333   \n1               7876   0.419799    18971  0.493539          0.233333   \n2                175   0.361545    19472  0.480460          0.233333   \n3               1278   0.649956    17035  0.476997          0.233333   \n4               2064   0.639680    17490  0.480107          0.233333   \n...              ...        ...      ...       ...               ...   \n9992254          695   0.644212     4112  0.478810          0.375000   \n9992255          972   0.720496     4601  0.448805          0.375000   \n9992256          731   0.411605     3688  0.492191          0.375000   \n9992257        10685   0.796830    12743  0.402374          0.375000   \n9992258          582   0.603102     3288  0.489329          0.375000   \n\n         user_answer_count  user_min  user_max  user_std  timestamp  \\\n0                       30         0         1  0.430183          0   \n1                       30         0         1  0.430183      32683   \n2                       30         0         1  0.430183      62000   \n3                       30         0         1  0.430183      83632   \n4                       30         0         1  0.430183     189483   \n...                    ...       ...       ...       ...        ...   \n9992254                 16         0         1  0.500000     412816   \n9992255                 16         0         1  0.500000     466537   \n9992256                 16         0         1  0.500000     506735   \n9992257                 16         0         1  0.500000     533630   \n9992258                 16         0         1  0.500000     557223   \n\n            user_id  content_id  \n0               124        7900  \n1               124        7876  \n2               124         175  \n3               124        1278  \n4               124        2064  \n...             ...         ...  \n9992254  2147451179         695  \n9992255  2147451179         972  \n9992256  2147451179         731  \n9992257  2147451179       10685  \n9992258  2147451179         582  \n\n[9992259 rows x 14 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>prior_question_elapsed_time</th>\n      <th>prior_question_had_explanation</th>\n      <th>question_id</th>\n      <th>q_correct</th>\n      <th>q_count</th>\n      <th>q_std</th>\n      <th>user_answer_mean</th>\n      <th>user_answer_count</th>\n      <th>user_min</th>\n      <th>user_max</th>\n      <th>user_std</th>\n      <th>timestamp</th>\n      <th>user_id</th>\n      <th>content_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>25420.408321</td>\n      <td>False</td>\n      <td>7900</td>\n      <td>0.829039</td>\n      <td>17969</td>\n      <td>0.376485</td>\n      <td>0.233333</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.430183</td>\n      <td>0</td>\n      <td>124</td>\n      <td>7900</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>26000.000000</td>\n      <td>False</td>\n      <td>7876</td>\n      <td>0.419799</td>\n      <td>18971</td>\n      <td>0.493539</td>\n      <td>0.233333</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.430183</td>\n      <td>32683</td>\n      <td>124</td>\n      <td>7876</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>29000.000000</td>\n      <td>False</td>\n      <td>175</td>\n      <td>0.361545</td>\n      <td>19472</td>\n      <td>0.480460</td>\n      <td>0.233333</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.430183</td>\n      <td>62000</td>\n      <td>124</td>\n      <td>175</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>26000.000000</td>\n      <td>False</td>\n      <td>1278</td>\n      <td>0.649956</td>\n      <td>17035</td>\n      <td>0.476997</td>\n      <td>0.233333</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.430183</td>\n      <td>83632</td>\n      <td>124</td>\n      <td>1278</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>18000.000000</td>\n      <td>False</td>\n      <td>2064</td>\n      <td>0.639680</td>\n      <td>17490</td>\n      <td>0.480107</td>\n      <td>0.233333</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.430183</td>\n      <td>189483</td>\n      <td>124</td>\n      <td>2064</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9992254</th>\n      <td>26000.000000</td>\n      <td>False</td>\n      <td>695</td>\n      <td>0.644212</td>\n      <td>4112</td>\n      <td>0.478810</td>\n      <td>0.375000</td>\n      <td>16</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.500000</td>\n      <td>412816</td>\n      <td>2147451179</td>\n      <td>695</td>\n    </tr>\n    <tr>\n      <th>9992255</th>\n      <td>20000.000000</td>\n      <td>True</td>\n      <td>972</td>\n      <td>0.720496</td>\n      <td>4601</td>\n      <td>0.448805</td>\n      <td>0.375000</td>\n      <td>16</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.500000</td>\n      <td>466537</td>\n      <td>2147451179</td>\n      <td>972</td>\n    </tr>\n    <tr>\n      <th>9992256</th>\n      <td>20000.000000</td>\n      <td>True</td>\n      <td>731</td>\n      <td>0.411605</td>\n      <td>3688</td>\n      <td>0.492191</td>\n      <td>0.375000</td>\n      <td>16</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.500000</td>\n      <td>506735</td>\n      <td>2147451179</td>\n      <td>731</td>\n    </tr>\n    <tr>\n      <th>9992257</th>\n      <td>20000.000000</td>\n      <td>True</td>\n      <td>10685</td>\n      <td>0.796830</td>\n      <td>12743</td>\n      <td>0.402374</td>\n      <td>0.375000</td>\n      <td>16</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.500000</td>\n      <td>533630</td>\n      <td>2147451179</td>\n      <td>10685</td>\n    </tr>\n    <tr>\n      <th>9992258</th>\n      <td>17000.000000</td>\n      <td>True</td>\n      <td>582</td>\n      <td>0.603102</td>\n      <td>3288</td>\n      <td>0.489329</td>\n      <td>0.375000</td>\n      <td>16</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.500000</td>\n      <td>557223</td>\n      <td>2147451179</td>\n      <td>582</td>\n    </tr>\n  </tbody>\n</table>\n<p>9992259 rows Ã— 14 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"Neural nets"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\ntarget=train_df['answered_correctly'].values\ntrain_df=train_df.loc[:,[ 'prior_question_elapsed_time','prior_question_had_explanation','question_id','q_correct','q_count','q_std' ,\n                           'user_answer_mean','user_answer_count', 'user_min', 'user_max', 'user_std', 'timestamp', 'user_id', 'content_id']]#,'explanation_mean', 'explanation_cumsum',\n      # 'lagtime', 'lagtime_mean']]\n\n\n# target=target[['answered_correctly']]\n# train_data = train_data[['prior_question_elapsed_time','prior_question_had_explanation','question_id','q_correct','q_count','q_std' ,'user_answer_mean','user_answer_count', 'user_min', 'user_max', 'user_std']]\nscaler = StandardScaler()\ntrain_df = scaler.fit_transform(train_df)\n# target = scaler.fit_transform(target)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"target","execution_count":20,"outputs":[{"output_type":"execute_result","execution_count":20,"data":{"text/plain":"array([1, 0, 1, ..., 0, 1, 0], dtype=int32)"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# X_train = train_data.reshape(train_data.shape[0], 1,train_data.shape[1])\n# X_test = target.reshape(target.shape[0], 1,target.shape[1])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"type(train_data)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# target = np.array(target.values.tolist())\n# type(target)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"#nn"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve\n\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport torch.nn as nn\nimport torch\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.utils.data import TensorDataset, DataLoader\n\nconfig = {\n    \"epochs\":10,\n    \"train_batch_size\":10_000,\n    \"valid_batch_size\":10_000,\n    \"test_batch_size\":10_000,\n    \"learning_rate\":0.01,\n}\n\n\nclass Model(nn.Module):\n    def __init__(self,input_size,output_size):\n        super(Model,self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(input_size)\n         self.dropout1 = nn.Dropout(0.3)\n        self.linear1 = nn.utils.weight_norm(nn.Linear(input_size,128))\n        \n        self.batch_norm2 = nn.BatchNorm1d(128)\n        self.dropout2 = nn.Dropout(0.2)\n        self.linear2 = nn.utils.weight_norm(nn.Linear(128,32))\n        \n        self.batch_norm3 = nn.BatchNorm1d(32)\n         self.dropout3 = nn.Dropout(0.2)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(32, 16))\n    \n        self.batch_norm4 = nn.BatchNorm1d(16)\n        self.dropout4 = nn.Dropout(0.2)\n        self.dense4 = nn.utils.weight_norm(nn.Linear(16, 1))\n        self.linear3 = nn.utils.weight_norm(nn.Linear(32,output_size))\n        \n    def forward(self,xb):\n        x = self.batch_norm1(xb)\n        x = self.dropout1(x)\n        x = F.relu(self.linear1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.relu(self.linear2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)         \n        x = self.batch_norm3(x)\n        x = F.relu(self.dense3(x))\n        \n        \n        x = self.batch_norm4(x)\n        x = self.dropout4(x)\n        x = torch.sigmoid(self.dense4(x))\n        return x#self.linear3(x)\n\ndef loss_fn(outputs,targets):\n        targets = targets.view(-1,1)\n        return nn.BCEWithLogitsLoss()(outputs,targets)\n    \n    \ndef train_loop(train_loader,model,loss_fn,device,optimizer,lr_scheduler=None):\n        model.train()\n        total_loss = 0\n        for i, (inputs, targets) in enumerate(train_loader):\n            inputs = inputs.to(device)\n            targets = targets.to(device)\n            \n            optimizer.zero_grad()\n            outputs = model(inputs)\n\n            loss = loss_fn(outputs,targets)\n            loss.backward()\n                \n            total_loss += loss.item()\n\n            optimizer.step()\n            if lr_scheduler != None:\n                lr_scheduler.step(loss.item())\n                    \n        total_loss /= len(train_loader)\n        return total_loss\n    \ndef valid_loop(valid_loader,model,loss_fn,device):\n    model.eval()\n    total_loss = 0\n    predictions = list()\n        \n    for i, (inputs, targets) in enumerate(valid_loader):\n        inputs = inputs.to(device)\n        targets = targets.to(device)\n        outputs = model(inputs)                 \n\n        loss = loss_fn(outputs,targets)\n        predictions.extend(outputs.sigmoid().detach().cpu().numpy())\n            \n        total_loss += loss.item()\n    total_loss /= len(valid_loader)\n            \n    return total_loss,np.array(predictions) \n    \n# x_train,x_valid,y_train,y_valid = train_data[train_idx,:],train_data[valid_idx,:],target[train_idx],target[valid_idx]\nx_train,x_valid,y_train,y_valid=train_test_split(train_df,target,test_size=0.3,random_state=567)\ninput_dim = x_train.shape[1]\noutput_dim = 1\nmodel = Model(x_train.shape[1],1)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\n        \ntrain_tensor = torch.tensor(x_train,dtype=torch.float)\ny_train_tensor = torch.tensor(y_train,dtype=torch.float)\ntrain_ds = TensorDataset(train_tensor,y_train_tensor)\ntrain_dl = DataLoader(train_ds, batch_size = config[\"train_batch_size\"],shuffle=True)#,num_workers = 4,pin_memory=True)\n\nvalid_tensor = torch.tensor(x_valid,dtype=torch.float)\ny_valid_tensor = torch.tensor(y_valid,dtype=torch.float)\nvalid_ds = TensorDataset(valid_tensor,y_valid_tensor)\nvalid_dl = DataLoader(valid_ds,batch_size =config[\"valid_batch_size\"],shuffle=False)#,num_workers = 4,pin_memory=True,)\n        \noptimizer = optim.Adam(model.parameters(),lr=config['learning_rate'])\nlr_scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer)#, mode='min', factor=0.1, patience=5, eps=1e-4, verbose=True)\n\nbest_loss = 999\n        \ntrain_losses = list()\nvalid_losses = list()\nauc_scores = list()\nstart = time.time()\nfor i in range(config[\"epochs\"]):\n    train_loss = train_loop(train_dl,model,loss_fn,device,optimizer,lr_scheduler=lr_scheduler)\n    valid_loss,predictions = valid_loop(valid_dl,model,loss_fn,device)\n            \n    train_losses.append(train_loss)\n    valid_losses.append(valid_loss)\n    end = time.time()\n    epoch_time = end - start\n    start = end\n            \n    score = roc_auc_score(y_valid,predictions)\n    auc_scores.append(score)\n    #roc_curve(y_valid,predictions)\n                          \n    print(f\"epoch:{i} Training loss:{train_loss} | Validation loss:{valid_loss} | Score: {score:.4f} | epoch time {epoch_time:.2f} \")\n            \n    if valid_loss <= best_loss:\n        print(f\"Validation loss Decreased from {best_loss} to {valid_loss}\")\n        best_loss = valid_loss\n#         torch.save(model.state_dict(),f'model{k}.bin')\n\n \nplt.figure(figsize=(10,7))\nplt.title(\"Loss vs Epoch\")\nplt.plot(train_losses, label = \"train\")\nplt.plot(valid_losses, label = \"val\")\n\nplt.legend()\nplt.show() \n\n\nplt.figure(figsize=(10,7))\nplt.title(\"AUC\")\nplt.plot(auc_scores, label = \"auc\")\n\nplt.legend()\nplt.show() ","execution_count":23,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"could not determine the shape of object type 'DataFrame'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-354217cf7c9a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m \u001b[0mtrain_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m \u001b[0my_train_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m \u001b[0mtrain_ds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTensorDataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_tensor\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not determine the shape of object type 'DataFrame'"]}]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":4}